<?php
declare(strict_types=1);

namespace App\Controller;

/**
 * Receive Controller
 *
 * @property \App\Model\Table\ReceiveTable $Receive
 * @method \App\Model\Entity\Receive[]|\Cake\Datasource\ResultSetInterface paginate($object = null, array $settings = [])
 */
class ReceiveController extends AppController
{
    /**
     * Index method
     *
     * @return \Cake\Http\Response|null|void Renders view
     */
    public function beforeFilter(\Cake\Event\EventInterface $event)
    {
        parent::beforeFilter($event);

        $this->Authentication->allowUnauthenticated(['']);

        $usuarioAtual = $this->Authentication->getIdentity();
        if ($usuarioAtual != null) {
            if ($usuarioAtual->role_id != '2' && $usuarioAtual->role_id != '5') {
                $this->Flash->error(__('Você não tem permissão para acessar esta página.'));
                return $this->redirect(['controller' => 'Web', 'action' => 'index']);
            }
        } else {
            return $this->redirect(['controller' => 'Web', 'action' => 'index']);
        }
    }

    public function initialize(): void
    {
        parent::initialize(); // TODO: Change the autogenerated stub
        $this->viewBuilder()->setLayout('website');
    }

    public function index()
    {
        $usuarioAtual = $this->Authentication->getIdentity();
        $motoristas = $this->paginate($this->Receive, ['contain' => ['Delivery', 'Users'], 'limit' => 10, 'sortableFields' => ['Delivery.id', 'Delivery.date', 'Delivery.time_start', 'Delivery.time_end', 'Delivery.driver', 'Users.name', 'Users.address']]);
        $usersTable = $this->fetchTable('Users');
        $motorista = $usersTable->newEmptyEntity();
        $enderecos = [];

        //monta mapa
        $query = $this->Receive->find('all')->contain(['Delivery', 'Users'])->where(['Delivery.date >=' => date('Y-m-d')])->toArray();
        foreach ($query as $rota) {
            if ($rota->delivery->date->format('d/m/Y') == date('d/m/Y')) {
                array_push($enderecos, $rota->user->address);
            }
        }

        if ($this->request->is('post')) {
            $motorista = $usersTable->patchEntity($motorista, $this->request->getData());
            $motorista->role_id = 2;
            if ($usersTable->save($motorista)) {
                $this->Flash->success(__('Motorista cadastrado com sucesso!'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('Não foi possivel cadastrar o motorista!'));
        }

        $receive = $this->paginate($this->Receive, ['limit' => 10]);

        $this->set(compact('motoristas', 'usuarioAtual', 'motorista', 'enderecos'));
    }

    /**
     * View method
     *
     * @param string|null $id Receive id.
     * @return \Cake\Http\Response|null|void Renders view
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function view($id = null)
    {
        $receive = $this->Receive->get($id, [
            'contain' => ['Users', 'Delivery'],
        ]);

        $this->set(compact('receive'));
    }

    /**
     * Add method
     *
     * @return \Cake\Http\Response|null|void Redirects on successful add, renders view otherwise.
     */
    public function add()
    {
        $receive = $this->Receive->newEmptyEntity();
        if ($this->request->is('post')) {
            $receive = $this->Receive->patchEntity($receive, $this->request->getData());
            if ($this->Receive->save($receive)) {
                $this->Flash->success(__('The receive has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The receive could not be saved. Please, try again.'));
        }
        $users = $this->Receive->Users->find('list', ['limit' => 200])->all();
        $delivery = $this->Receive->Delivery->find('list', ['limit' => 200])->all();
        $this->set(compact('receive', 'users', 'delivery'));
    }

    /**
     * Edit method
     *
     * @param string|null $id Receive id.
     * @return \Cake\Http\Response|null|void Redirects on successful edit, renders view otherwise.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function edit($id = null)
    {
        $receive = $this->Receive->get($id, [
            'contain' => [],
        ]);
        if ($this->request->is(['patch', 'post', 'put'])) {
            $receive = $this->Receive->patchEntity($receive, $this->request->getData());
            if ($this->Receive->save($receive)) {
                $this->Flash->success(__('The receive has been saved.'));

                return $this->redirect(['action' => 'index']);
            }
            $this->Flash->error(__('The receive could not be saved. Please, try again.'));
        }
        $users = $this->Receive->Users->find('list', ['limit' => 200])->all();
        $delivery = $this->Receive->Delivery->find('list', ['limit' => 200])->all();
        $this->set(compact('receive', 'users', 'delivery'));
    }

    /**
     * Delete method
     *
     * @param string|null $id Receive id.
     * @return \Cake\Http\Response|null|void Redirects to index.
     * @throws \Cake\Datasource\Exception\RecordNotFoundException When record not found.
     */
    public function delete($id = null)
    {
        $this->request->allowMethod(['post', 'delete']);
        $receive = $this->Receive->get($id);
        if ($this->Receive->delete($receive)) {
            $this->Flash->success(__('Coleta cancelada com sucesso!'));
        } else {
            $this->Flash->error(__('Não foi possivel cancelar a solicitação.'));
        }

        return $this->redirect(['action' => 'index']);
    }

}
